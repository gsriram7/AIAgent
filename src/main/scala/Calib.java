import java.util.TreeMap;

public class Calib {

    static int[][] runtimes = new int[][]{
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 7}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1}, {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3}, {0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 9}, {0, 1, 1, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 11}, {1, 1, 3, 4, 4, 7, 8, 10, 12, 12, 13, 15, 16, 17, 21}, {1, 1, 3, 3, 10, 13, 23, 24, 25, 27, 28, 48, 49, 56, 61}, {1, 2, 4, 7, 9, 13, 24, 47, 57, 60, 62, 81, 92, 129, 166}, {0, 3, 8, 12, 22, 31, 54, 83, 195, 195, 205, 218, 254, 302, 391}, {1, 1, 3, 7, 29, 37, 114, 177, 308, 433, 557, 633, 647, 690, 893}, {1, 3, 11, 12, 45, 75, 192, 327, 622, 1025, 2042, 2066, 2224, 2260, 2570}, {0, 2, 7, 16, 56, 127, 379, 619, 1504, 2249, 4119, 5455, 7393, 8349, 10943}, {1, 2, 9, 27, 97, 149, 544, 937, 2843, 4267, 9057, 13686, 21356, 27731, 32689}, {44, 90, 120, 325, 620, 1199, 2352, 6585, 11068, 27366, 43296, 78540}, {35, 36, 52, 80, 159, 339, 1240, 2478, 5896, 12551}, {13, 40, 53, 84, 238, 544, 1743, 4237, 10047, 22714}, {35, 49, 52, 113, 355, 761, 2827, 5694, 15914, 38081}, {17, 20, 70, 124, 411, 1014, 4008, 8222, 26319, 63819}, {11, 24, 46, 161, 448, 838, 3759, 7102, 29208, 55733}, {10, 14, 46, 188, 464, 1723, 7050, 16089, 60221}, {41, 70, 121, 264, 779, 2114, 9640, 22094, 88091}, {55, 58, 101, 102, 420, 654, 1608, 3215, 8609, 15343, 30456}, {53, 65, 110, 128, 528, 849, 1856, 3649, 9125, 16853, 36319, 55549}, {41, 46, 157, 181, 747, 912, 2594, 5144, 14780, 29669}, {33, 53, 146, 203, 783, 945, 3209, 7002, 20704, 41016}, {66, 81, 103, 179, 608, 1124, 4307, 8728, 28552}, {73, 78, 145, 241, 842, 1536, 5927, 12772, 44412}, {40, 74, 183, 786, 1828, 6503}, {33, 62, 158, 916, 2645, 8194}, {31, 71, 190, 991, 2605, 9372}, {24, 78, 230, 1330, 3382, 12502}, {35, 101, 235, 1582, 4520, 16605}, {95, 394, 941, 6905, 17687, 96930}, {61, 461, 1095, 10996, 21344}, {78, 427, 1097, 9461, 21826}, {81, 403, 1107, 8442, 20477}, {181, 474, 1283, 9418, 24178}, {84, 529, 1489, 9865, 25357}, {88, 579, 1491, 10866, 31881}, {96, 619, 1549, 10480, 31041}, {59, 682, 1635, 11604, 37640}, {61, 581, 1623, 14094, 33816}, {58, 627, 1771, 15196, 39172}, {71, 699, 1935, 16779, 45295}, {64, 799, 2134, 19884, 41475}
    };

    private static TreeMap<Integer, int[]> getSingleRuns() {
        TreeMap<Integer, int[]> kv = new TreeMap<Integer, int[]>();

        kv.put(50, new int[]{27, 32, 142, 148, 1487, 3698});
        kv.put(51, new int[]{13, 18, 69, 154, 1568, 4085});
        kv.put(52, new int[]{16, 20, 98, 161, 1883, 4535});
        kv.put(53, new int[]{8, 9, 151, 155, 2016, 4711});
        kv.put(54, new int[]{7, 8, 89, 152, 2318, 5799});
        kv.put(55, new int[]{16, 19, 104, 168, 2615, 6487});
        kv.put(56, new int[]{9, 18, 89, 185, 2488, 7029});
        kv.put(57, new int[]{8, 10, 90, 247, 2863, 7560});
        kv.put(58, new int[]{12, 16, 147, 200, 3048, 7778});
        kv.put(59, new int[]{6, 10, 124, 240, 3470, 8768});
        kv.put(70, new int[]{46, 94, 354, 821, 9342});
        kv.put(71, new int[]{17, 28, 376, 689, 9700});
        kv.put(90, new int[]{7, 20, 486, 1533});
        kv.put(91, new int[]{8, 19, 538, 1742});
        kv.put(150, new int[]{95, 195, 2637, 7538});
        kv.put(200, new int[]{133, 192, 7563, 22848});
        kv.put(250, new int[]{108, 312, 15600});
        kv.put(300, new int[]{184, 563, 33978});
        kv.put(350, new int[]{194, 759, 54622});
        kv.put(400, new int[]{263, 836, 90659});
        kv.put(450, new int[]{353, 1148});
        kv.put(500, new int[]{568, 1704});
        kv.put(550, new int[]{761, 2203});
        kv.put(600, new int[]{895, 2665});
        kv.put(650, new int[]{1089, 3927});
        kv.put(700, new int[]{1289, 4927});

        return kv;
    }


    static int getDepth(int size, int time) {
        if (size <= 49) {
            int[] runtime = runtimes[size - 1];
            int depth = 1;
            for (int i = 0; i < runtime.length; i++) {
                if (runtime[i] < time)
                    depth = i + 1;
                else
                    break;
            }
            return (depth < 9) ? depth : 8;
        }

        else if (size > 200) {
            TreeMap<Integer, int[]> runs = getSingleRuns();
            int depth = 1;
            int[] runtime = runs.get(runs.higherKey(size));
            for (int i = 0; i < runtime.length; i++) {
                if (runtime[i] < time)
                    depth = i + 1;
                else
                    break;
            }

            return (depth > 2) ? 2 : depth;
        }

        else {
            TreeMap<Integer, int[]> runs = getSingleRuns();
            int depth = 1;
            int[] runtime = runs.get(runs.higherKey(size));
            for (int i = 0; i < runtime.length; i++) {
                if (runtime[i] < time)
                    depth = i + 1;
                else
                    break;;
            }

            return (depth > 5) ? 5 : depth;
        }
    }

}
